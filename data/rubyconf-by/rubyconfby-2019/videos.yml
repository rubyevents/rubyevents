---
- title: "How to Hijack, Proxy and Smuggle Sockets with Rack/Ruby"
  raw_title: '#RubyConfBY2019 – "How to Hijack, Proxy and Smuggle Sockets with Rack/Ruby", David Halasz'
  speakers:
    - David Halasz
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-24"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by

    Does your network only let through HTTP connections? No problem! Let's hijack some sockets from incoming HTTP connections and use it to smuggle any kind of traffic through an HTTP session! Concurrently! In #Ruby! 

    Rack is a super simple, yet a very versatile tool to implement web servers in Ruby. It beats under the hood of #Rails, but it can do much more. The socket hijacking has been implemented into Rack to support WebSockets by bypassing the middleware and so not blocking the worker threads. Together with the HTTP Upgrade requests, this can be used to send regular TCP traffic through an open HTTP connection. This talk is about leveraging socket hijacking to smuggle an SSH connection through an HTTP session using Rack. All this by using Ruby, a language that's not ideal for doing concurrency and IO.

    Warning: your infosec team already does not like me, but I have some cute stickers.


    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "dAFXekd6k68"

- title: "What's Missing?"
  raw_title: '#RubyConfBY2019 – "What''s Missing?", Ivan Nemytchenko (Lightning Talk)'
  speakers:
    - Ivan Nemytchenko
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-24"
  description: |-
    #RubyConfBY 2019 - https://rubyconference.by
    We are experienced developers. Yet, when we deal with big codebases, we often feel that we don't fully control the situation. The question is what's missing? What is this mysterious thing? 

    We continuously learn new things, try new frameworks and approaches, but it doesn't really help. Let's talk why is it happening and how to reclaim the sense of control back.

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "OyQ61ch7pnE"

- title: "Kafka's Metamorphosis"
  raw_title: '#RubyConfBY2019 – "Kafka''s Metamorphosis", Nick Grysimov'
  speakers:
    - Nick Grysimov
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    On our way to scalability in SoftSwiss we discovered that our beloved RabbitMQ does not want to play by new rules. So we turn our heads towards #ApacheKafka, stream-processing platform developed to withhold hundreds of thousands messages per second. 

    In this talk I'll briefly discuss Kafka's architecture, show how we spin it up in production (and which problems we encountered) and talk about future challenges our product have to solve to fully encorporate high-availability mindset.

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "2y1hFXGHqR0"

- title: "Ruby Serverless Framework"
  raw_title: '#RubyConfBY2019 – "Ruby Serverless Framework", Tung Nguyen'
  speakers:
    - Tung Nguyen
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    AWS released official #Ruby Support for Lambda at re:Invent 2018. This announcement makes Ruby a first-class citizen in the Serverless world. The framework that will be discussed was already been running Ruby at Native speed prior to the announcement. The framework switched over to the official AWS version of Ruby less than 2 weeks after the announcement!

    We will do a quick introduction to the Serverless world and AWS Lambda to establish a baseline for everyone. Then we'll jump into a Ruby Framework that makes Serverless easy to work with.

    Ruby is the not only one of most beautiful languages in the world but also extremely powerful. The power lies in Ruby's Metaprogramming abilities. This serverless framework leverages these Ruby powers to create a DSL that essentially translates Ruby code to AWS Lambda functions. We'll introduce these Framework concepts:

        Controllers
        Routes
        Jobs

    We will create a few demos and deploy it to AWS Lambda live. We will also cover some architecture pattern examples that can be built with the framework:

        Web API Application
        Event Driven Security: Auto-Remediation
        Continuous Compliance: AWS Config Rules
        Event Driven IoT Architectures

    Serverless Ruby opens a world of possibilities for Ruby programmers.

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "PfbIT-_mugk"

- title: "Business Logic in Ruby"
  raw_title: '#RubyConfBY2019 – "Business Logic in Ruby", Andrzej Krzywda'
  speakers:
    - Andrzej Krzywda
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    This talk is a story of my journey in the programming world - a journey which started in the Smalltalk world, switched to Java, but then was dominated by #Ruby/Rails. 

    My focus on implementing the business logic was always crucial in my apps. During the talk, I will show how my thinking has been changing, how it was challenged and where I ended for now. I will show many code examples and discuss their pros and cons, including the ways of testing them. Object-oriented and Function-driven techniques will be shown. 

    I strongly believe that the ability of implementing business logic, separated from the framework, separated from the persistence mechanism, separated from any library - is crucial to the success of many business projects. 

    During the talk I want to take you for this journey with me and leave you with new knowledge that you can apply in your codebase immediately.

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "d1tPdmPRVU4"

- title: "RPC Frameworks Overview"
  raw_title: '#RubyConfBY2019 – "RPC Frameworks Overview", Yulia Oletskaya (Lightning Talk)'
  speakers:
    - Yulia Oletskaya
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 - https://rubyconference.by/2019
    Overview of #gRPC, #ApacheThrift, #Twirp, #Finagle frameworks, their main features, and #Ruby specific implementation details.

    Lately, a lot of web developers tend to find out that REST isn't always the ultimate solution for services communication problems. Some people thrift to search for new architectural styles (e.g. GraphQL) and others give a new breath to old-fashioned RPCs. This talk is a brief overview of existing RPC frameworks (e.g. gRPC, Apache Thrift, Twirp) including Ruby specific details.

    Video Partner – iTechArt  https://www.itechart.by
  video_provider: "youtube"
  video_id: "R_W48bwWD24"

- title: "Railways, States & Sagas: Pure Ruby for Wizards"
  raw_title: '#RubyConfBY2019 – "Railways, States & Sagas: Pure Ruby for Wizards", Sergey Dolganov, Lightning talk'
  speakers:
    - Sergey Dolganov
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    Have you ever heard about data consistency problems within the multi-service architecture? That problem could be solved using Sagas design pattern. In fact, it's quite hard to implement. 

    Want to know how? Welcome on board, young magicians!

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "Ku-IqG4X3q4"

- title: "It is correct, but is it fast?"
  raw_title: '#RubyConfBY2019 – "It is correct, but is it fast?", Piotr Murach'
  speakers:
    - Piotr Murach
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 - https://rubyconference.by
    #Ruby is optimised for happiness, we tell ourselves when we write beautiful code. We've written our acceptance and unit tests. What else is there to do? Nah, we don't need to worry about performance. 

    Sometimes, though, things turn sour when your beautiful code meets reality and the data processing consumes all of the server's resources. There are no magic bullets that can instantly detect performance and scaling issues in our code, but there are techniques that can help. 

    In this talk, you'll learn all about the benefits of writing performance assertions in a test suite. You'll see how a seemingly reasonable algorithm in fact exhibits abysmal performance and doesn't scale. We'll explore two different types of performance assertions that can be used to establish the performance characteristics of our example. Once we've done that, from then on, only hard cold measurements will guide us in refactoring the code to be more performant. 

    You will leave equipped with the techniques to help you learn how fast your code really is. Let's put a stop to slow code and remove all of those pesky performance bugs!

    Video Partner – iTechArt  https://www.itechart.by
  video_provider: "youtube"
  video_id: "8_HrI5kOwMY"

- title: "Optimistic UI with Logux & Ruby"
  raw_title: '#RubyConfBY2019 – "Optimistic UI with Logux & Ruby", Dmitry Salahutdinov'
  speakers:
    - Dmitry Salahutdinov
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 - https://rubyconference.by
    The modern web becomes more distributed: both front-end and back-end turns out to be the complicated part of the bipolar web-application. And communication between them is going to be a new challenge. 

    The classic AJAX problems: - the unstable network makes AJAX based UI works annoying - does not work offline - there is no way to merge conflits, last processed update is accepted as the last truth - UI becomes pessimistic with a huge amount of loaders and other request-time lockers - the increasing complexity of the JavaScript code for processing AJAX requests - AJAX work only in one way and does not allow live updates 

    #Logux is the new way of synchronization between client and server, which provides many features for modern web out of the box: Live Updates, Optimistic UI, Offline-first. 

    What does Logux bring to level up client-server communication? - uses event-sourcing and CRDT concepts to work automatic resolving conflicts - communicates over web-socket in both directions to support Live Updates - synchronizes event log between clients automatically - support the protocol upgrade - is fully integrated with the current front-end ecosystem (Redux) 

    I will talk about how basic Logux concepts and how all of the work together to support the modern web features.

    Video Partner – iTechArt  https://www.itechart.by
  video_provider: "youtube"
  video_id: "i_E-CeUb6ek"

- title: "The View Is Clear from Here"
  raw_title: '#RubyConfBY2019 – "The View Is Clear from Here", Aaron Patterson'
  speakers:
    - Aaron Patterson
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    Web applications typically have bottlenecks at the database layer. This is one reason Active Record gets so much attention by application developers, Rails core developers, and conference speakers. 

    In this talk we will be focusing on something a little bit different. Instead of the database layer, we will be looking at the view layer of the application. We will be looking at how view 
    rendering is handled in #Rails. This will include the process by which views are compiled, cached, and rendered. We'll learn how much memory they are found, how much memory they use, and more importantly how we can speed them up.

    Audience members should expect to leave with more information about Rails internals along with development techniques that they can use in their applications today!

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "MiW1NA1FR8U"

- title: "Code as Data"
  raw_title: '#RubyConfBY2019 – "Code as Data", Denis Defreyne'
  speakers:
    - Denis Defreyne
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-25"
  description: |-
    #RubyConfBY 2019 - https://rubyconference.by
    Algorithms are typically encoded in code. Sometimes, however, letting non-developers modify algorithms can be beneficial — but for that, we'll have to move the implementation of the algorithm from code into data. Doing so yields a bunch of interesting advantages.

    Imagine that you're implementing a complex algorithm that encapsulates some business process at your company. The business stakeholders are pleased, but sometimes come to you with questions, such as

        Why is this calculation result so high?
        Can you please tweak some factors in the algorithm?

    One-off requests like these are probably fine, but occasionally they can be so numerous that you end up spending a significant amount of your time dealing with incoming requests. (You have more interesting stuff to do!) Ideally, business stakeholders themselves would be able to figure out why that calculation result is so high, and would be able to change the factors themselves.

    The implementation of the algorithm is in code – and it is typically not feasible to let business stakeholders handle code. (They have more interesting stuff to do!) We can move the algorithm's implementation out of code and into data… and that yields us a bunch of interesting advantages. 

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "InnlXmswdyk"

- title: "The Biggest Mobprogramming Session Ever"
  raw_title: '#RubyConfBY2019 – "The Biggest Mobprogramming Session Ever", Ana María Martínez Gómez'
  speakers:
    - Ana María Martínez Gómez
  event_name: "RubyConfBY 2019"
  date: "2019-04-06"
  published_at: "2019-04-26"
  description: |-
    #RubyConfBY 2019 – https://rubyconference.by
    Do you like hacking? For the first time, you will be able to do this during a talk! 

    In this talk, Ana will drive the biggest mobprogramming session ever. We all will write code live together to send a PR to an open source #Ruby or #Rails project. The project we choose, what we implement and the code we write is up to you! More than 200 developers and 45 minutes to select a task, implement it and send a working code upstream may sound impossible. Even if we don't manage, we will learn from each other a ton about open source, git, Ruby and RoR.

    Video Partner – iTechArt https://www.itechart.by
  video_provider: "youtube"
  video_id: "lFWi_JzVFpw"
