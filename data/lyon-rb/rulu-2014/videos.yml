# Website: https://2014.rulu.fr
# Schedule: https://2014.rulu.fr/schedule/
# Repo: https://github.com/lyonrb/rulu2014
---
## Day 1

- title: "String Theory"
  raw_title: "String Theory"
  speakers:
    - Chris Kelly
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2015-02-01"
  video_provider: "youtube"
  video_id: "zWQFhC-hmoY"
  description: |-
    Peer into the dark and mysterious world of Ruby internals, delve to the point that the basic String becomes a complex web of optimizations, flags and peculiarities. The starting point for String Theory is the observation that immutable strings are more performant than mutable ones, and 23 character strings are more performant than longer ones. The how and why of these idiosyncrasies is where our journey begins. We'll chip away at the Ruby VM to explore how String is implemented in C, to fully understand String Theory we'll need to journey into Ruby memory structures and ultimately to the garbage collector. Get your spelunking gear ready as we discover how the GC has evolved, once we emerge from the darkness you'll see Ruby in a whole new light.

- title: "Wrapper's Delight"
  raw_title: "Wrapper's Delight"
  speakers:
    - Emily Stolfo
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2015-04-28"
  video_provider: "youtube"
  video_id: "4GOCfpmSdeQ"
  description: |-
    Many of us have found ourselves writing a Ruby API to wrap another API but caught up in the tension between feature over-exposure and idiomatic consistency. It isn't always obvious whether it's better to favor flexibility by exposing the underlying API itself or to commit to a concrete level of abstraction. In using the Ruby driver to MongoDB as an example, we'll explore some of the choices us wrappers have to make in building the best API.

    There are two main points to keep in mind while building an API and making design choices: Ruby gem API design is a form of user experience design and a good API should be easy to maintain. We'll take a look at a number of UX principles and see how they apply to API design and discuss how to optimize for unanticipated changes in what we are wrapping.

- title: "PostgreSQL for the Ruby/Rails Developer"
  raw_title: "Postgresql for the ruby/rails developer"
  speakers:
    - Yannick Schutz
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2015-02-01"
  video_provider: "youtube"
  video_id: "DrjmtS59j6k"
  description: |-
    Frameworks tend to abstract more and more the database to provide users a similar experience using MySQL, SQLite, PostgreSQL and some even try to abstract over MongoDB. It is important to bring back the power of the database to the web developer.

    The database is where all your data lives and is the most important piece of your architecture. Tame your database and learn its inner power to bring a better experience to your users. My favorite animal is PostgreSQL. What you will learn here:

    - How multi columns indexes, partial indexes and functional indexes will turn your old Lada to a Lamborghini.
    - JSON and Hstore columns. Bring the NoSQL to your SQL with grace. See how your tables says thanks when you stop adding columns to them every 5 minutes when a store column give you power for the next ten features.
    - Arel: How to level up your ActiveRecord to do what basic it cannot do alone. I'm looking at you OR queries.
    - Plain text queries in your Ruby and how it is not always SQL injection-ish. SQL can do magical stuff for you too.
    - psql, EXPLAIN ANALYZE, testing indexes, using pg_stat_statements, and some queries that will tell you what is wrong with that database.

    It might also interest you, GO/PHP/Python dev!

- title: "Anatomy of a Mocked Call"
  raw_title: "Anatomy of a mocked call"
  speakers:
    - Sam Phippen
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2015-02-02"
  video_provider: "youtube"
  video_id: "5xJaM6B6JRs"
  description: |-
    RSpec is often accused of being "full of magic". For the most part: I disagree. However: mocking a method on an object, calling it, recording that call and then working out if expectations have been violated after the fact is a complex set of operations.

    This talk will give a guided tour, with code, through RSpec's mocks. We'll look at one of the most simple cases possible. We'll also look at the most complicated case I can conceive of. Hopefully everyone will learn a little something about testing whilst watching this talk.

- title: "RubyMotion Under the Bonnet"
  raw_title: "RubyMotion under the bonnet"
  speakers:
    - Eloy Durán
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2014-11-24"
  video_provider: "youtube"
  video_id: "3h0W-zorIL8"
  description: |-
    RubyMotion is a toolchain that lets you develop native applications using the Ruby language. This talk will focus on what makes RubyMotion tick and take a look at Ruby from a static point of view, covering topics such as AOT vs JIT compilation, memory management, and interfacing with different languages and runtimes.

- title: "Large-scale Rails Applications"
  raw_title: "Large-scale Rails Applications"
  speakers:
    - Konstantin Tennhard
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-19"
  announced_at: "TODO"
  published_at: "2014-11-25"
  video_provider: "youtube"
  video_id: "80S6vYwz4DI"
  description: |-
    Building large-scale applications is a demanding process – no matter which framework you use. The true challenge, however, lies in maintaining these applications. To guarantee maintainability, we need to focus on the following three aspects: comprehensibility, modularity, and robustness. And easy to maintain applications make developers happy!

    This talk is about building large scale applications on top of Ruby on Rails. The framework is known for getting you started quickly, but is it still a good choice when your application grows past 100,000 lines of code?

## Day 2

- title: "Compilers for Free"
  raw_title: "Compilers for Free"
  speakers:
    - Tom Stuart
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "2015-04-28"
  video_provider: "youtube"
  video_id: "9oHdvKkuWno"
  description: |-
    Partial evaluation is a powerful tool for timeshifting some aspects of a program's execution from the future into the present. Among other things, it gives us an automatic way to turn a general, abstract program into a faster, more specialised one.

    This maths-free talk uses Ruby to explain how partial evaluation works, how it can be used to make programs go faster, and how it compares to ideas like currying and partial application from the world of functional programming. It then investigates what happens when you run a partial evaluator on itself, and reveals some surprising results about how these techniques can be used to automatically generate compilers instead of writing them from scratch.

- title: "A Problem with Frogs"
  raw_title: "A Problem with Frogs"
  speakers:
    - Paolo Perrotta
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "2014-12-15"
  video_provider: "youtube"
  video_id: "z5v53qXqo9E"
  description: |-
    When you tell people that you’re a programmer, they think that you work with complicated stuff. But you know better: not everything that you do is complicated. Most things that you do are much worse than that.

    This is a speech about the theory of complexity—but don’t worry, it’s more fun than it sounds. I’ll try to answer a question that applies to most things you do as a developer, from writing code to talking to customers: how do you solve a problem, when you don’t even know what the problem is?

- title: "Modern Concurrency Practices in Ruby"
  raw_title: "Modern Concurrency Practices in Ruby"
  speakers:
    - Arnab Deka
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "2015-04-29"
  video_provider: "youtube"
  video_id: "aqqoD9r4cWw"
  description: |-
    So you think that concurrency is a subject lost in the Ruby world? That it's not practical because of the GIL? That the concurrency paradigm that's bundled with Ruby (a.k.a threading) is not the best way to do concurrency?

    Think again. The Ruby concurrency story has advanced a lot in the last couple of years. Have you heard of people talking about actor-based concurrency, using futures, Software Transactional Memory, channels etc. and want to know more about those?

    This talk is a primer on these different paradigms of concurrency, briefly touching on the traditional threads-based model, but focusing more on modern paradigms like actors/futures/STM/channels, with examples and demos.

- title: "More Code, Fewer Pixels"
  raw_title: "More Code, Fewer Pixels"
  speakers:
    - Cameron Daigle
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "2015-04-29"
  video_provider: "youtube"
  video_id: "jNdsClEOC3I"
  description: |-
    Removing the "Design Phase". Eschewing Photoshop. Using frameworks. The malleable, flexible, agile nature of web apps these days requires a drastically new approach to how UI concepts are transformed into working code.

    Join me as I dive into the vagaries of Hashrocket's design-develop-revise-repeat feedback loop – and learn how we turn static markup into an essential communication tool through rich UI prototyping, generated content, and general cleverness.

- title: "Ruby & You"
  raw_title: "Ruby & You"
  speakers:
    - Terence Lee
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "2015-02-14"
  video_provider: "youtube"
  video_id: "QydSpDCoskk"
  description: |-
    On November 22, 2013, a devastating security exploit was publicized to the Ruby community: Heap Overflow in Floating Point Parsing (CVE-2013-4164). There were no fixes provided for Ruby 1.9.2.

    At Heroku, we realized this impacted our ability to provide reliable runtime support. Not wanting to leave our customers high and dry, Heroku released Ruby 1.8.7 and 1.9.2 security patches on our runtimes and pushed to get them upstream.

    This talk goes through the steps and mistakes I learned on how to interact with members of ruby-core, tell war stories from core, and explain how you can get contributions upstream and improve Ruby for everyone.

- title: "Panel: Discussion of Ruby's Future"
  raw_title: "Discussion of Ruby's Future"
  speakers:
    - TODO
  event_name: "Ruby Lugdunum Conference 2014"
  date: "2014-06-20"
  announced_at: "TODO"
  published_at: "TODO"
  video_provider: "not_published"
  video_id: "discussion-ruby-future-rulu-2014"
  description: |-
    Join us at a café close to the conference to talk about Ruby's future with our panelists.
