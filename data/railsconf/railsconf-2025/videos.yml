---
- title: "Keynote: 365 Days Later: Moving From Java To RoR And How It Changed Everything"
  raw_title: "365 Days Later: Moving From Java To RoR And How It Changed Everything"
  event_name: "RailsConf 2025"
  description: |-
    Last year at RailsConf Detroit, keynote speaker Irina Nasarova announced that Flexcar was launching on Rails that very day— in the middle of the conference. Now, one year later, I’m here to share the full story of how that transition unfolded, how things played out, and what life has been like for us after a full year on Ruby on Rails.

    Flexcar made the bold decision to move from a Java-based architecture with 80 micro-services to a monolithic Ruby on Rails application in just four months. While this transition would have been aggressive to do in four months with an experienced Rails team, our team was brand new to RoR. This shift has had far-reaching effects—not just on our tech stack, but on our workflow, team dynamics, and company culture.

    In this talk, I’ll take you through our journey, sharing lessons learned, challenges we overcame, and what I wish I had known before embarking on this path. We’ll dive into how the transition affected our development process, how we gained company-wide support, and the unexpected successes (and a few surprises) that came after the launch.

    If you’re an engineering leader considering a similar move or a switch to Ruby on Rails, you’ll leave this session with:

    - Insights into managing a successful tech stack migration and avoiding common pitfalls
    - Strategies for securing buy-in from leadership, product, and support teams
    - How the shift to Rails reshaped our team, processes, and products

    Join me for a candid reflection on a year of change, growth, and lessons learned, and take away actionable tips to ensure your own transition is as smooth and successful as possible.
  speakers:
    - John Dewsnap
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "2025-05-07 14:00:00 UTC"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "keynote-day-1-railsconf-2025"

- title: "Startups on Rails in Past, Present and Future"
  raw_title: "Startups on Rails in Past, Present and Future"
  event_name: "RailsConf 2025"
  description: |-
    In 2025 Ruby on Rails continues to power successful startups: during the last 12 months one of them became the leading AI-powered app builder, another raised $150M, and another filed for IPO. But let’s put things into perspective and explore how the essence of Rails’ appeal to founders since the beginning and into the future.

    We'll journey through Rails history with pivotal stories from Intercom, Gusto, and Y Combinator - companies that leveraged Rails' productivity to achieve remarkable growth. These legendary examples demonstrate which aspects of Rails and its ecosystem were key for bringing products to market and sustaining explosive growth.

    Then we'll celebrate recent Rails success stories—such as Bolt.new, Whop, Chime and Uscreen—examining the tremendous success these startups have posted recently. We'll explore the key factors behind Rails' resurgence among founders who are choosing the framework in recent years, including Hotwire, Inertia, Kamal and more.

    Finally, we'll take these learnings and look into the future by identifying what we can all do to ensure Rails continues being the choice for tomorrow's entrepreneurs. We'll discuss tooling, open source, educational resources, and community voices that could catalyze even more startup success stories on Rails.
  speakers:
    - Irina Nazarova
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "irina-nazarova-railsconf-2025"

- title: "Development Speed Optimizations in Rails 8"
  raw_title: "Development Speed Optimizations in Rails 8"
  event_name: "RailsConf 2025"
  description: |-
    The release of Rails 8 included several speed optimizations for development, especially for larger applications. Let’s talk about what they are, and why they matter. In this talk, you’ll learn about why the Rails boot process is so important, and the changes my team and I made to initializers, file watching, and route drawing.
  speakers:
    - Gannon McGibbon
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "gannon-mcgibbon-railsconf-2025"

- title: "Derailing Our Application: How and Why We Are Decoupling Our Code from Rails"
  raw_title: "Derailing Our Application: How and Why We Are Decoupling Our Code from Rails"
  event_name: "RailsConf 2025"
  description: |-
    Cisco Meraki is probably the largest Rails shop you’ve never heard of. Our 2 million line Rails monolith has been under continuous development since 2007. As with any large codebase, ours is not without challenges. In “Derailing Our Application,” we share how our architecture has evolved to decouple 800,000 lines of Ruby code from Rails constructs in order to enable us to scale our team to 1,000 engineers and beyond without losing the benefits of Rails. Join us on the track less traveled! All aboard!
  speakers:
    - Fito von Zastrow
    - Alan Ridlehoover
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "fito-von-zastrow-alan-ridlehoover-railsconf-2025"

- title: "Yes, You Can Work on Rails & any other Gem"
  raw_title: "Yes, You Can Work on Rails & any other Gem"
  event_name: "RailsConf 2025"
  description: |-
    Have you ever wanted to dig into the Rails source, but it just seems too daunting?

    Good news! In this session, we'll look at practical tools to level you up, so you can make it happen. Even better, these navigation tools work for any gem & your day-to-day codebase too.

    We'll use live demos to engage with real code from gems & Rails. We'll improve our ability to sight-read code & identify patterns within swiftly. You'll see how to refine your learning process so it yields compounding results to make you a better developer & teammate.
  speakers:
    - Kasper Timm Hansen
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "kasper-timm-hansen-railsconf-2025"

- title: "The Ghosts of Action View Cache"
  raw_title: "The Ghosts of Action View Cache"
  event_name: "RailsConf 2025"
  description: |
    It's Railsconf Eve and you're trying to sleep, but you keep being awoken by ghosts trying to tell you about Action View! You're taken to the past, where you learn about Russian Doll Caching. You're shown the present, where brand new tools are built on Action View's foundations. And finally you're shown the future, where Rails applications are more powerful than ever.

    Through this journey, you’ll gain a deep understanding of Action View and how its primitives can help you solve a wide range of problems. Whether you’re optimizing an existing app or building the future of Rails, you’ll leave knowing how to make your views faster, leaner, and more maintainable.
  speakers:
    - Hartley McGuire
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "hartley-mcguire-railsconf-2025"

- title: "Rails Frontend Evolution: It Was a Setup All Along"
  raw_title: "Rails Frontend Evolution: It Was a Setup All Along"
  event_name: "RailsConf 2025"
  description: |-
    Remember when Rails dominated the frontend, then seemingly retreated to API-only mode? Plot twist: that wasn't Rails giving up—it was setting the stage for a triumphant return.

    This talk traces Rails' frontend journey from its revolutionary MVC beginnings through the Asset Pipeline glory days and the Webpacker wilderness, revealing how each phase was actually building toward today's renaissance. While we were lamenting Rails' frontend "decline", frontend frameworks themselves began reinventing server-side rendering and fullstack ideas—essentially rediscovering what Rails knew all along.

    Now we've come full circle with Hotwire's elegant HTML-over-the-wire approach and Inertia.js bridging modern JavaScript frameworks with Rails conventions. What looked like Rails losing the frontend battle was actually a strategic retreat before a decisive counterattack.

    Join us to explore how Rails' frontend evolution was never about abandonment but patient reinvention—and how its "setup" has positioned it perfectly for the future of web development.
  speakers:
    - Svyatoslav Kryukov
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "svyatoslav-kryukov-railsconf-2025"

- title: "Cache = Cash! 2.0"
  raw_title: "Cache = Cash! 2.0"
  event_name: "RailsConf 2025"
  description: |-
    Back in 2013, I gave a talk at RailsConf titled "Cache = Cash!", where I explored how caching can dramatically improve Rails performance. A decade later, caching has only become more powerful — but also more dangerous. In this updated session, we’ll go beyond the official Rails documentation and explore advanced caching techniques that can significantly boost performance — if used wisely.

    Start with the Basics: Rails Caching 101

    To make sure everyone can follow along, we’ll begin with a clear introduction to Rails' built-in caching strategies, including:

    - Fragment Caching – Storing reusable view fragments to speed up rendering.
    - Russian Doll Caching – Nesting caches effectively to prevent unnecessary recomputation.
    - Low-Level Caching (Rails.cache) – Directly caching arbitrary data for optimized reads.
    - SQL Query Caching – Reducing database load by storing query results efficiently.
    - Cache Store Options – Choosing between memory store, file store, Memcached, and Redis.

    This will give attendees — even those with no prior caching experience — a solid foundation before we dive into the advanced techniques that aren’t covered in the official Rails guides.

    The Closer, the Faster: Understanding Cache Hierarchies 🚀

    Not all caches are created equal! The further away your data is stored, the slower your application becomes. If you want truly high-performance caching, you need to understand where to cache data and how access speeds compare.

    Here's how different caches stack up in terms of access speed:

    - L1 Cache (CPU Internal Cache) → ~1 nanosecond
    L2/L3 Cache → ~3–10 nanoseconds
    - RAM (Memory Access) → ~100 nanoseconds
    - SSD (Local Disk Cache) → ~100 microseconds (1000× slower than RAM!)
    - Network Call (e.g., Redis, Database Query) → ~1–10 milliseconds
    - Spinning Disk (HDD Cache Access) → ~10 milliseconds

    That’s a 10-million-fold difference between CPU cache and an HDD!

    Practical Takeaways

    ✅ Cache as close to the CPU as possible – Learn how to use in-memory caches and CPU-friendly data structures.
    ✅ Optimize ActiveRecord for caching efficiency – Instead of always caching full ActiveRecord objects, consider caching only essential attributes as JSON, arrays, or hashes. This reduces deserialization overhead and keeps frequently accessed data lightweight.
    ✅ Minimize unnecessary cache retrievals – Just because Redis is fast doesn’t mean it’s the right cache for every scenario. Consider database-level caching via materialized views or denormalized tables when appropriate.
    ✅ Leverage cache preloading and warming – Reduce performance bottlenecks by anticipating cache misses before they happen.

    When Caching Goes Wrong: Debugging and Avoiding Traps

    Caching is powerful, but it can turn into a nightmare if you don’t handle it properly. We’ll cover:

    - Cache Invalidation Challenges – “There are only two hard things in computer science: naming things, and cache invalidation.” Learn how to keep caches fresh without unnecessary complexity.
    - Debugging Stale Data Issues – Identify and resolve issues caused by outdated or inconsistent cache entries.
    - Knowing When NOT to Cache – Some things shouldn’t be cached! Learn when AI-driven caching decisions (or even Rails defaults) might cause more harm than good.

    What You’ll Walk Away With

    - A solid understanding of Rails caching fundamentals — perfect for beginners.
    - Advanced caching techniques that go beyond the Rails guides.
    - Performance insights on CPU, memory, and distributed caches.
    - A clear strategy for debugging and maintaining cache integrity.

    A decade ago, "Cache = Cash!" was all about making Rails apps faster and more efficient. This time, we’re taking it even further — with new techniques, new pitfalls, and even bigger performance gains.

    Are you ready to push Rails caching to the next level?
  speakers:
    - Stefan Wintermeyer
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "stefan-wintermeyer-railsconf-2025"

- title: "Evolution of Rails within RubyGems.org"
  raw_title: "Evolution of Rails within RubyGems.org"
  event_name: "RailsConf 2025"
  description: |-
    As a 16 year old open source Rails app, Rubygems.org can tell a story of how building and maintaining a Rails app has changed over the years.  Join us as we progress from its creation in 2009 until today, exploring how things have changed and what we've learned. We dig into deploying, handling gem dependencies, background processing, web servers, security, and the frontend approaches.  We'll wrap up with our thoughts on the future of security and compliance.
  speakers:
    - Samuel Giddins
    - Nick Quaranto
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "samuel-giddins-nick-quaranto-railsconf-2025"

- title: "Understanding Ruby Web Server Internals: Puma, Falcon, and Pitchfork Compared"
  raw_title: "Understanding Ruby Web Server Internals: Puma, Falcon, and Pitchfork Compared"
  event_name: "RailsConf 2025"
  description: |-
    As Ruby developers, we often focus on our application code, but the choice of web server can significantly impact performance, scalability, and resource efficiency.

    In this talk, we’ll explore Puma, Falcon, and Pitchfork - three modern Ruby web servers with distinct execution models. We’ll cover:

    * How pre-forking and copy-on-write help in minimizing boot time and memory usage.
    * How Falcon eliminates the traditional challenges of blocking I/O in Ruby, enabling new approaches to IO bound workloads
    * Why Puma’s hybrid model balances concurrency, performance, and memory usage.
    * How Pitchfork optimizes for latency and memory efficiency and why it’s a good choice for CPU-bound applications.

    By the end, you’ll understand how to choose, tune, and optimize your web server for your specific use case
  speakers:
    - Manu Janardhanan
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "manu-janardhanan-railsconf-2025"

- title: "Keeping the Rails Magic Alive After 18 Years"
  raw_title: "Keeping the Rails Magic Alive After 18 Years"
  event_name: "RailsConf 2025"
  description: |-
    Hear from someone who wrote the first line of code for a Rails app started in 2007 that's over 3 million lines of code today. Learn from our journey migrating to a Component Based Rails Application (CBRA) and tools we've open sourced along the way which you may not have heard about, but can help with any Rails application.

    Our mantra is Build vs Buy. Learn what that means and if it makes sense for you. We've built our own messenger app, telephony services, support ticket system, project management software, and other apps. Why would we build stuff rather than buy or subscribe to existing apps? We even built our own cloud. I'll explain the experiences that set us on that path.

    Our ongoing journey towards a Component Based Rails Application (CBRA). An application of fully gem/engine-based components. I'll discuss lessons learned and why we persist with CBRA when everyone else with a Rails monolith app is going with Packwerk.

    Open source tools we've built and how they can help any Rails application. We have a number of public gems and tools like cobra_commander, which helps manage Component Based Rails apps, power-tools, a collection of utility gems useful in any Rails app, and, last but not least, our Playbook Design System which is full design system for Rails, Swift, and React. RailConf will be the first place we've ever talked about these publicly.
    At the end, hopefully attendees walk out more confident in choosing Rails for the long haul, armed with knowledge and tools that helped our company go big and keep up with the scale of our growth.
  speakers:
    - Wade Winningham
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "wade-winningham-railsconf-2025"

- title: "Master the Rails Asset Pipeline: Best Practices for Apps & Gems"
  raw_title: "Master the Rails Asset Pipeline: Best Practices for Apps & Gems"
  event_name: "RailsConf 2025"
  description: |-
    We've all faced it - asset pipeline issues blocking that Friday deploy. From mysterious JavaScript loads to incorrect asset paths in your gems, these roadblocks are frustrating. Learn to master Rails assets from development to production, with practical tips for managing all asset types. Walk away with debugging techniques and optimization strategies you can apply instantly to your apps and gems.

    ---

    Asset management (JS and CSS) is not easy.
    Rails' docs are full of jargon and expect the reader to know a lot about JS and how the browser works.
    This leads to not understanding the different bits and pieces of the asset pipeline.
    "Is it just one?", "What is Sprockets", "Is Propshaft enough?", "Is my app locked if I used Webpacker in the past?", "Is Vite bad for my app?"
    These are some of the questions that pop up in people's heads lately and there's a bit hesitation of upgrading based on all this missed knowledge.
    When we start talking about outside gems that need to ship external assets, there's a whole other can of worms. There's no documented way of doing it, developers duplicate dependencies (37signals included), and there's no silver bullet.

    In my talk I'm going to touch on:
    - what is the DOM and how the browser loads and runs JS
    - what is the `defer` argument
    - bundling vs not bundling
    - what is this whole "Asset Pipeline" and the various bits and pieces
    - the current modern alternatives (js-bundling, importmaps, Vite)
    - how to ship assets in gems. I'm going to present three ways with their pros and cons

    The talk will have snippets (with gists attached for future reference) and sample repos for the viewers' reference.
    It's going to be technical but guided so the viewers will have a good progression of understanding.
  speakers:
    - Adrian Marin
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "adrian-marin-railsconf-2025"

- title: "Ruby Internals: A Guide For Rails Developers"
  raw_title: "Ruby Internals: A Guide For Rails Developers"
  event_name: "RailsConf 2025"
  description: |-
    Ever wondered how Ruby takes your code and runs it? It’s time to go on a journey into Ruby internals designed especially for Rails developers! We’ll learn about all the parts of an interpreter, and how their inner-workings affect our Rails apps! No experience with C is required!
  speakers:
    - Matheus Richard
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "matheus-richard-railsconf-2025"

- title: "The Rails Features We Loved, Lost, and Laughed At"
  raw_title: "The Rails Features We Loved, Lost, and Laughed At"
  event_name: "RailsConf 2025"
  description: |-
    Rails has always moved fast. Sometimes too fast. It gave us bold ideas, best practices that weren't, and features that felt like magic – until they didn't.

    Before database migrations, SQL changes were a manual mess. Before REST, routing conventions were a free-for-all. Before AJAX, entire pages refreshed just to update a single field. Some features transformed how we build apps. Others were left at the station. A few refuse to stay gone.

    This session takes a fast-paced, slightly irreverent ride through the features that shaped Rails, the ones we hyped up only to abandon, and the ones that just won't quit. Rails keeps moving forward, but history has a way of repeating itself. Let's see what we can learn from the features we built, broke, and buried.

    Some ideas never left the station. Others keep coming back for another ride. See you onboard. 🚂
  speakers:
    - Robby Russell
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "robby-russell-railsconf-2025"

- title: "10 Costly Database Performance Mistakes (and How to Fix Them)"
  raw_title: "10 Costly Database Performance Mistakes (and How to Fix Them)"
  event_name: "RailsConf 2025"
  description: |-
    After working with countless Rails and Postgres applications as a consultant and backend engineer, I’ve seen firsthand how database mistakes can cause big costs and headaches. Poor data types, inefficient queries, and flawed schema designs slow down operations, and result in excessive costs through over-provisioned servers, downtime, lost users, and engineering hours spent restructuring features.

    How do we prevent these pitfalls? Awareness is the first step. And if your database is already serving tons of woefully inefficient queries, where should you focus for the biggest wins?

    In this talk, we'll break down 10 real-world Rails database mistakes, including how they happened, the impact they had, and most importantly, how to fix them. Topics include query design, indexing, schema optimization, and how the CPU, memory, and IOPS resources tie into Active Record SQL performance.

    Expect practical takeaways, real examples, and solutions you can apply immediately. Slides and blog posts will be available at GitHub.
  speakers:
    - Andrew Atkinson
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "andrew-atkinson-railsconf-2025"

- title: "Fireside Chat With David Heinemeier Hansson"
  raw_title: "Fireside Chat With David Heinemeier Hansson"
  event_name: "RailsConf 2025"
  description: ""
  speakers:
    - David Heinemeier Hansson
    - Elise Shaffer
  date: "2025-07-08"
  published_at: "TODO"
  announced_at: "2025-05-28 14:25:00 UTC"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "closing-keynote-day-1-railsconf-2025"

- title: "Rails Then, Now, And Next: A Conversation With Our Community"
  raw_title: "Rails Then, Now, And Next: A Conversation With Our Community"
  event_name: "RailsConf 2025"
  description: |-
    Rails has been evolving for over two decades, shaping the modern web development landscape while fostering one of the most passionate and tight-knit communities in tech. This panel brings together influential voices from different eras of Rails to reflect on its past, discuss its present, and envision its future.

    Join us for a lively, insightful conversation with seasoned contributors and community leaders as we explore:

    How Rails has changed over the years—both technically and culturally
    Pivotal moments in the framework’s history and lessons learned
    The current state of Rails and its place in the modern web ecosystem
    What’s next for Rails and how we, as a community, can shape its future
    Whether you’re a long-time Rails developer or just starting your journey, this panel offers valuable perspectives and stories from those who have helped shape the framework and its community.

    Some Potential Curated Questions:

    Past:
    - What drew you to Rails initially, and what kept you engaged?
    - What were some of the most defining moments in Rails history?
    - What lessons can newer developers learn from the early days of Rails?
    - What is your favorite memory from RailsConf?

    Present:
    - What excites you most about Rails today?
    - How has the community evolved over the years?
    - What are the biggest challenges Rails developers face in today’s tech landscape?

    Future:
    - Where do you see Rails in the next 5–10 years?
    - What should the Rails community focus on to ensure long-term sustainability?
    - How can we make Rails an even more welcoming and innovative space?

    Format & Audience Engagement:
    - 60-minute panel discussion with a moderator guiding the conversation
    - 10-15 minutes reserved for audience Q&A
    - Interactive Slido or similar tool to collect questions in real time

    This panel is designed to be both reflective and forward-looking, offering insights for developers at all levels. It will provide a rare opportunity to hear directly from those who have shaped Rails, making it a must-attend session for anyone invested in its future.
  speakers:
    - Kinsey Durham Grace
    - Evan Phoenix
    - Marty Haught
    - Eileen M. Uchitelle
    - Nadia Odunayo
    - Sarah Mei
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "keynote-day-2-railsconf-2025"

- title: "Hotwire Native: A Rails developer’s secret tool to building mobile apps"
  raw_title: "Hotwire Native: A Rails developer’s secret tool to building mobile apps"
  event_name: "RailsConf 2025"
  description: |-
    Building native mobile apps is time-consuming and expensive. Each screen must be built three times: once for web, again for iOS, and a third time for Android.

    But with Hotwire Native you only need to build your screens once, in HTML and CSS, and then reuse them across all three platforms. If you already have a Hotwire-enabled Rails app, you can use the screens you've already built!

    And you don't need to be an expert in Swift or Kotlin. A thin wrapper for each platform enables continuous updates by only making changes to your Rails codebase. Deploy your code and all three platforms get your changes immediately.

    Join me as I build iOS and Android apps from scratch, live. Learn the essentials, practical tips, and common pitfalls I’ve picked up since working with Hotwire Native since 2016.
  speakers:
    - Joe Masilotti
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "joe-masilotti-railsconf-2025"

- title: "What can we do together? A facilitated community-building workshop"
  raw_title: "What can we do together? A facilitated community-building workshop"
  event_name: "RailsConf 2025"
  description: |-
    Community is one of the best parts of attending in-person conferences. But meeting people and socializing can be daunting. Maybe you want to join a conversation in the hallway but can’t break into the impenetrable group circle. Perhaps it’s your first conference, and everyone seems to already know each other. Or you might be looking for collaborators in a particular Rails subject matter and don’t seem to know where to find them.

    For the very last RailsConf, join this guided interactive workshop to make the meaningful connections you’re seeking. We’ll learn about each other, reflect on ways to find and offer support, and leave with a more resilient network to enter the next phase of our community, together.
  speakers:
    - Stephanie Minn
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "stephanie-minn-railsconf-2025"

- title: "Workshop: How to instrument your Rails app with OpenTelemetry"
  raw_title: "How to instrument your Rails app with OpenTelemetry"
  event_name: "RailsConf 2025"
  description: |-
    Join an OpenTelemetry maintainer to learn how to instrument your Rails application with this growing open source project. We'll cover the basics of observability and the benefits you can receive from each of OpenTelemetry's three core signals: Traces, Metrics, and Logs. We'll talk about Active Support Notifications and how OpenTelemetry leverages them for automatic instrumentation, as well as the instrumentation strategies in other popular Rails-related libraries. Together, we'll configure the OpenTelemetry SDK in a minimal Rails application, add custom instrumentation to core methods within our application, and export the results to an observability backend.
  speakers:
    - Kayla Reopelle
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "kayla-reopelle-railsconf-2025"

- title: "Panel: Ruby Podcast"
  raw_title: "Ruby Podcast Panel"
  event_name: "RailsConf 2025"
  description: |-
    The Ruby Podcast Panel will feature a collection of Rubyists with active podcasts, engaging in conversation about Ruby, Rails, and the community that has grown up around our favorite tech stack.
  speakers:
    - David Hill
    - Drew Bragg
    - Chris Oliver
    - Stephanie Minn
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "ruby-podcast-panel-railsconf-2025"

- title: "Panel: The Past, Present and Future of Background Jobs"
  raw_title: "The Past, Present and Future of Background Jobs according to Mike, Rosa, Maciej, and Ben"
  event_name: "RailsConf 2025"
  description: |-
    Join a discussion between Sidekiq’s Mike Perham, Solid Queue’s Rosa Gutiérrez, Karafka and Shoryuken’s Maciej Mensfeld, and GoodJob’s Ben Sheldon.

    This panel hosts the maintainers of the four most well-known Active Job backends. They’ll discuss and reflect on their different approaches, philosophies, capabilities, and challenges to powering background jobs and integrating with Active Job.

    The discussion will cover a range of topics including performance, feature-sets, support, commercialization, regrets, visions of the future, questions from the audience, and more!
  speakers:
    - Ben Sheldon
    - Mike Perham
    - Rosa Gutierrez
    - Maciej Mensfeld
  date: "2025-07-09"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "background-jobs-panel-railsconf-2025"

- title: "Keynote: The Keynote of Keynotes"
  raw_title: "The Keynote of Keynotes"
  event_name: "RailsConf 2025"
  description: |-
    Nearly 20 years of RailsConf, nearly 20 years of RailsConf talks and workshops, nearly 20 years of RailsConf keynotes. Talks that loom a little larger than the typical session, that leave behind more of an impact, that have kept us thinking over the years.

    Have you attended every RailsConf?

    That's the only way you could have walked away with nearly 20 years of wisdom and learning from RailsConf keynotes.

    ...until now.
  speakers:
    - Aji Slater
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "aji-slater-railsconf-2025"

- title: "How 10 years of RailsConfs can inform the next 10 years of your career"
  raw_title: "How 10 years of RailsConfs can inform the next 10 years of your career"
  event_name: "RailsConf 2025"
  description: |-
    RailsConf has played an important role in my professional and personal life. I've learned about technology in ways I wouldn't have otherwise at RailsConf. I've learned about myself in ways I wouldn't have otherwise thanks to RailsConf. I've met people that changed the course of my career thanks to RailsConf. I've met others who have become dear friends thanks to RailsConf. I've done things I've never done before thanks to RailsConf.

    The same may be true for you. We should celebrate and reflect on that. Where do we go from here? Let's talk about it together.
  speakers:
    - Kevin Murphy
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "kevin-murphy-railsconf-2025"

- title: "The Front-end is Omakase"
  raw_title: "The Front-end is Omakase"
  event_name: "RailsConf 2025"
  description: |-
    "Rails is omakase." DHH's classic 2012 blog post is still great reading in 2025. Here's a quote from the article that sums up his main point:

    "A team of chefs picked out the ingredients, designed the APIs, and arranged the order of consumption on your behalf according to their idea of what would make for a tasty full-stack framework."

    Right! And we have all benefitted enormously from the Rails core team sharing those tastes with the rest of us. The ingredients and API design decisions he's referring to fit the shape of a great deal of the web applications we might want to build. Just as we trust the omakase chef to serve a great unagi and sake pairing, we lean on the years of industry experience baked into Rails to build web applications with fewer resources.

    If Rails and the Rails philosophy are omakase, the front-end world is the opposite: "okonomi," meaning "choosing what to order." Rather than picking a set of technologies, smart defaults, and conventions on your behalf, most front-end frameworks and tools expect the developer to cobble together a bunch of tools that were not necessarily designed to work with one another. The decision points are endless: Typescript or Javascript? Vite, webpack, or importmaps? SASS or Less? PostCSS or dart-sass? Tailwind, Bootstrap, or Bulma? BEM, SMACSS, OOCSS, CUBE, or HECS? Maybe CSS modules? And what about React, Vue, Angular, Svelte, or HTMX? The list goes on and on.

    For understandable reasons, Rails has gradually retracted its opinions around front-end development over the last 10 years. In practice this has meant the Rails front-end is much less omakase and much more okonomi than the rest of the framework. Need a Javascript bundler? Bring your own. Want to use Typescript? Configure it yourself. While at first glance the high degree of flexibility might seem freeing, it's quite contrary to how Rails was originally designed. As Leonardo Da Vinci said, "Art lives from constraints and dies from freedom." The constraints Rails places on its developers are, somewhat counterintuitively, the same things that make it such a productive framework.

    In my opinion, Rails needs an omakase front-end. We need a set of strong front-end opinions like we have on the back-end.

    During my talk, I'd like to share my opinions for configuring the front-end of a Rails application, and provide a look at the libraries, configurations, and tools I've found to be the most productive. The talk will include a brief history of front-end tooling in Rails, what we've learned along the way, and what a more opinionated future could look like. I'll introduce a Rails generator I'm working on that configures a fully-baked and opinionated front-end setup - like Jumpstart or Bullet Train, but specifically for the front-end. I'd like to finish up by touching on future innovations like rendering ViewComponents in the browser.

    So, why am I qualified to give this talk? I work on an open-source design system for a large company that runs a number of complex Rails apps. I've been around for most of the big front-end shifts in Rails, including the introduction of the asset pipeline, CoffeeScript, webpacker, and now js/cssbundling, importmaps, and ViewComponent. I've written code using all of these tools, and now my design systems work is giving me an even broader look at the front-end ecosystem. I recently re-wrote the documentation for getting started with our gems and Javascript packages, including a guide for adding it to a Rails app. I wanted to be thorough, so I covered configuring every tool supported by cssbundling-rails and jsbundling-rails, as well as Sprockets, vite, and importmaps. It was... a lot. Imagine how overwhelming all these choices must be for a beginner coming to Rails for the first time. Hell, I barely have a handle them, and I've been in the industry for 15 years.
  speakers:
    - Cameron Dutro
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "cameron-dutro-railsconf-2025"

- title: "Precision Pays Off: Handling Money in Rails Apps"
  raw_title: "Precision Pays Off: Handling Money in Rails Apps"
  event_name: "RailsConf 2025"
  description: |-
    Handling money in software is deceptively tricky. Floating-point arithmetic introduces precision errors that can lead to financial disasters, that's why banks have long relied on COBOL for its fixed-point precision. In this talk, we’ll dive into how Rails solves these problems today using tools like `BigDecimal` and the `Money` gem, which references Martin Fowler’s *Patterns of Enterprise Application Architecture*. We’ll also explore the future of financial applications in Rails, from native money types to fintech, and share real-world stories of how Rails has saved clients from costly mistakes.
  speakers:
    - Ian Lourenço
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "ian-lourenco-railsconf-2025"

- title: "The future of Rails begins in the browser"
  raw_title: "The future of Rails begins in the browser"
  event_name: "RailsConf 2025"
  description: |-
    With a mature community and adoption by prominent tech veterans, Ruby on Rails already has a strong foundation, and these elements define both the present state of the framework, as well as its short-term future. But the long-term future of the framework is an equation that will depend heavily on the opposite end of the equation: namely, the newcomers, those who will take their first steps on Rails.

    But will those first steps look like? Imagine being able to learn and play with Rails without the need to deal with installations or development environments. What if the next generation of Rails developers could start using something easily accessible to everyone: the browser!
    Sounds like science fiction? Hardly! The fact is, interactive web-based tutorials, learning materials, and playgrounds play a critical role in wider technology adoption. We’re certain this is the future–and Rails must be a part of that future.

    Join us on our journey to bring the “Getting Started with Rails” experience right into your browser. We’ll do this with the help of some new technologies: WebAssembly, WebContainers and in-browser databases!
  speakers:
    - Vladimir Dementyev
    - Albert Pazderin
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "vladimir-dementyev-albert-pazderin-railsconf-2025"

- title: "Not Invented Here: Things Rails Didn't Innovate"
  raw_title: "Not Invented Here: Things Rails Didn't Innovate"
  event_name: "RailsConf 2025"
  description: |-
    Rails is a mixture of design patterns, practices, and magic. In this talk, we'll explore how Rails embraces ideas from other frameworks and projects.

    Active Record was born of Martin Fowler. MVC was the brainchild of Trygve Reenskaug. Rails 3 completely absorbed the Merb project, gaining modularity and extensibility that it previously lacked.

    We all learn by standing on the shoulders of giants, even Rails. By understanding the inception of design patterns, we are more likely to be able to create ideas of our own. This helps us to not only grow in our own ability, but to help others improve as well.
  speakers:
    - Caleb Hearth
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "caleb-hearth-railsconf-2025"

- title: 'UX & Design for Rails Devs: Elevating the "One Person Framework" Experience'
  raw_title: 'UX & Design for Rails Devs: Elevating the "One Person Framework" Experience'
  event_name: "RailsConf 2025"
  description: |-
    Rails 8's positioning as the "one-person framework" empowers developers to build complete applications independently, but many struggle with creating interfaces that are both functional and visually appealing. We will blitz through a variety of techniques and applications, pulling from recent examples such as the Rails Guides redesign. This talk will provide actionable UX assessment methods, fundamental visual design principles, and a live redesign demonstration using paper and Figma—equipping Rails developers with essential skills to create applications that are not just functional, but delightful to use.
  speakers:
    - John Athayde
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "john-athayde-railsconf-2025"

- title: "From FTP to Kamal: 20 Years of Deploying Rails"
  raw_title: "From FTP to Kamal: 20 Years of Deploying Rails"
  event_name: "RailsConf 2025"
  description: |-
    RailsConf 2025 marks the end of an era—so let's take a ride through Rails history, deployment-style! From the Wild West days of FTP and CGI to the golden age of Capistrano, Passenger, and Heroku, all the way to Docker and Kamal, Rails deployment has been a journey of innovation, frustration, and occasional existential dread.

    In this talk, we’ll revisit the tools, hacks, and battle scars of Rails deployment over the last 20 years. Remember Mongrel? FastCGI? The magical experience you had the first time you ran 'git push heroku'? We’ll celebrate the evolution of Rails ops, the community that shaped it, and what lessons we should take into the next 20 years.

    Whether you deployed your first Rails app last week or you've been around since script/server, this talk is for you. Expect nostalgia, war stories, and callouts to the projects that paved the way to (and give some background on) what we have today. No grand lessons. No deep takeaways. Just a celebration of how far we’ve come.
  speakers:
    - Ben Curtis
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "ben-curtis-railsconf-2025"

- title: "The Future of: PWAs on Rails"
  raw_title: "The Future of: PWAs on Rails"
  event_name: "RailsConf 2025"
  description: |-
    Rails is one of the best frameworks for building web applications. It's simple, yet powerful. Core Rails is always adding new features that increase productivity and make the developer's life easier.

    Since version 7.2, Rails has added PWA components to the default setup. DHH himself said that he will be pushing hard for PWAs: "No native apps, just the very best PWAs you can build."

    There are lots of HTML APIs that can make your app behave like a native app. Device-native features like Geocoding, Device Motion, Battery status, and more can be accessed through the browser.

    PWA implementations are evolving. The new `ActionNotifier` gem is on its way to make it easier to send push notifications. But PWAs have a lot more to offer and you can start using them today in a Rails way so you can be ready for when Rails is indeed, full PWA-ready.
  speakers:
    - Edy Silva
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "edy-silva-railsconf-2025"

- title: "Rails Framework Defaults: Defusing the Time Bomb in Your Upgraded App"
  raw_title: "Rails Framework Defaults: Defusing the Time Bomb in Your Upgraded App"
  event_name: "RailsConf 2025"
  description: |-
    Yay, you did it: you upgraded Rails and it's live in production! All done, right? Not so fast: most upgrade talks and tutorials skip over the important step of upgrading Rails framework defaults. Your Rails upgrade isn't really done until you've disarmed the time bomb of outdated defaults. It can be tricky and isn't well documented, but you can do it with these steps.
  speakers:
    - Josh Puetz
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "josh-puetz-railsconf-2025"

- title: "Silent Killers: Lessons from the Brink"
  raw_title: "Silent Killers: Lessons from the Brink"
  event_name: "RailsConf 2025"
  description: |-
    Every Rails app starts with a solid foundation, but as features evolve and teams change, even the best projects can drift toward complexity. Over time, code that once felt effortless can become tangled, slow, and hard to maintain. This talk dives deep into what truly degrades a Rails application over time. We’ll explore practical ways to diagnose the health of a codebase, including underutilized metrics beyond test coverage and churn. Along the way, I’ll share battle-tested strategies for bringing struggling Rails apps back to life without a painful rewrite.
  speakers:
    - Joe Leo
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "joe-leo-railsconf-2025"

- title: "Unraveling the black box: past, present and future of authentication in Rails"
  raw_title: "Unraveling the black box: past, present and future of authentication in Rails"
  event_name: "RailsConf 2025"
  description: |-
    We often treat authentication as a black box because we’ve been standing on the shoulders of giants (aka Devise). Recently, a long-awaited feature has shipped with Rails 8: a built-in authentication generator! Let’s explore how the new default works and what we can learn from history and precedents when creating our authN flows.
  speakers:
    - Alicia Rojas
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "alicia-rojas-railsconf-2025"

- title: "Internationalization on Rails: Unpacking the Rails I18n Toolkit"
  raw_title: "Internationalization on Rails: Unpacking the Rails I18n Toolkit"
  event_name: "RailsConf 2025"
  description: |-
    Building an app that's "just in English" might feel sufficient, but what if your next user prefers Spanish, German, or Chinese? Localization and internationalization are often an afterthought for many developers, if they are thought of at all. But it’s not only big, global companies that can benefit from them. They’re essential for startups and solo developers, too. In this talk, I’ll demystify internationalization and show you how Rails makes it easy to bake internationalization into your app from the start. You’ll learn how to use tools built into Rails and from gems in the wider ecosystem to easily support multilingual users, and make your app available to more people, wherever they are!
  speakers:
    - Chris Fung
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "chris-fung-railsconf-2025"

- title: "The History of Rails in 10 Blog Posts"
  raw_title: "The History of Rails in 10 Blog Posts"
  event_name: "RailsConf 2025"
  description: |-
    Calling nostalgic veterans and newbies alike! We're traveling through time on a tour of some of the most influential blog posts to hit the Rails community over the past two decades. With stops at iconic locations including in testing, service objects, and JavaScript, you won't want to miss it! Bring your chrono-passport and see you in 2003!
  speakers:
    - Joël Quenneville
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "joel-quenneville-railsconf-2025"

- title: "The ActiveRecord Tapes"
  raw_title: "The ActiveRecord Tapes"
  event_name: "RailsConf 2025"
  description: |-
    In this talk, we'll dig deep into the design decisions of the Attributes API. We'll talk to its author and hear their experience from "I think this would help with the current project I'm on!" to "Oh no, I'm rewriting all of ActiveRecord!".

    This will be a peek under the hood to a foundational part of ActiveRecord. You'll learn about the difficult technical constraints and tradeoffs that were made in development. Even if you don't know anything about the Attributes API, if you've used ActiveRecord, you've used it! No prior knowledge needed.
  speakers:
    - Tess Griffin
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "tess-griffin-railsconf-2025"

- title: "Off the Rails: Validating non-model classes with…ActiveModel?"
  raw_title: "Off the Rails: Validating non-model classes with…ActiveModel?"
  event_name: "RailsConf 2025"
  description: |-
    Have you ever wished you could run Rails validators to check that a Hash, Struct or Data instance is properly formatted? Have you ever wanted to be able to compose complex validation logic on the fly rather than registering them at a class level with complicated conditionals? Did you ever have a use case for a single, generic validation and thought it’d be overkill to create a new ActiveModel class?

    In this talk, we'll explore how to build a single class that’ll accept almost any kind of argument and let you register and run both built-in and custom validations against that argument’s key/value pairs and methods. Through test-driven development and examining the source code for ActiveModel validations and ActiveSupport callbacks, we’ll gradually build a robust solution to support custom and built-in validators and their various options like `if` and `allow_blank`.

    Whether you want to validate a JSON field in a model, ensure that an incoming API request is properly formatted, check for valid events in an event-sourced application or run a validator against a class from a third-party library without monkey-patching, this talk will help you use some of Rails’ most classic features in a new and powerful way.
  speakers:
    - Andy Andrea
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "andy-andrea-railsconf-2025"

- title: "The Modern View Layer Rails Deserves: A Vision for 2025 and Beyond"
  raw_title: "The Modern View Layer Rails Deserves: A Vision for 2025 and Beyond"
  event_name: "RailsConf 2025"
  description: |-
    Rails revolutionized web development and continues to evolve, but its view layer has remained largely unchanged while frontend needs have evolved dramatically. Rails has maintained its relevance by adopting technologies like Turbolinks and now Turbo/Hotwire while preserving its core principles.

    But today's developers face challenges the current view layer wasn't designed to solve: complex UI interactions, reactivity, robust tooling for large codebases, intergration with modern UI kits, and modern tooling expectations.

    This talk explores how a new HTML-aware ERB parser (Herb) could enable a truly reactive Rails view layer, bringing LiveView-style reactivity while preserving the "HTML-over-the-wire" philosophy. It will integrate with existing LSPs, unlock powerful tooling, and enable reactive server-rendered templates that could be reused client-side.

    I'll demonstrate what's possible through proof-of-concepts and early prototypes, showing how we can collectively advance Rails views for modern development.
  speakers:
    - Marco Roth
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "marco-roth-railsconf-2025"

- title: "From Resque to SolidQueue - Rethinking our background jobs for modern times"
  raw_title: "From Resque to SolidQueue - Rethinking our background jobs for modern times"
  event_name: "RailsConf 2025"
  description: |-
    If your Rails app has been around for a while, you might still be using Resque for background jobs. We were too—until scaling issues, missing features, and increasing maintenance costs made it clear that Resque was no longer working for us.

    This year we migrated to SolidQueue, Rails’ new default job runner and haven't looked back. This talk will walk you through how we did it—what worked, what didn’t, and what we learned along the way.

    Key takeaways:
    • Why we left Resque
    • How we migrated with minimal disruption using a parallel rollout
    • Why we went through the effort to re-name all our queues so that they were SLO-based  (within_1_minute) and why this matters
    • Lessons learned, pitfalls to avoid, and how SolidQueue made our jobs (and jobs!) easier

    If your background jobs are from a previous era, this talk will give you a practical, real-world migration playbook to modernize with SolidQueue—without breaking anything.
  speakers:
    - Andrew Markle
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 1 - Independence"
  video_provider: "scheduled"
  video_id: "andrew-markle-railsconf-2025"

- title: "The Rails Story: Two Decades of Design and Decisions"
  raw_title: "The Rails Story: Two Decades of Design and Decisions"
  event_name: "RailsConf 2025"
  description: |-
    Ever wondered why Rails is built the way it is? This talk explores the thoughtful design decisions behind Ruby on Rails, tracing how its features evolved over the past two decades. We'll uncover the historical context and reasoning behind Rails' choices, such as "Convention over Configuration," and why some features have evolved or disappeared entirely. Beginners will clearly understand Rails’ fundamentals, while experienced developers will gain a deeper appreciation of the framework they use every day.
  speakers:
    - Ratnadeep Deshmane
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Breakout 2 - Freedom"
  video_provider: "scheduled"
  video_id: "ratnadeep-deshmane-railsconf-2025"

- title: "Closing Keynote Day 3"
  raw_title: "Keynote"
  event_name: "RailsConf 2025"
  description:
  speakers:
    - TBA
  date: "2025-07-10"
  published_at: "TODO"
  announced_at: "TODO"
  track: "Main Stage - Liberty"
  video_provider: "scheduled"
  video_id: "closing-keynote-day-3-railsconf-2025"
